def func1(arg1, arg2):
    var3 = func4()
    var7 = func5(arg1, arg2)
    var8 = 307 + (arg2 + (arg2 - 37))
    var9 = var8 | var8 | var7
    var10 = (var3 - -127 + -1445008688) ^ arg2
    if var10 < arg2:
        var11 = var10 ^ 962 & (-408 | var9)
    else:
        var11 = var8 ^ var3
    var12 = var10 + (var7 + var8) & var7
    var13 = (var8 | arg1 + var3) & var10
    var14 = var10 ^ var9 & var3
    var15 = (var12 ^ (var7 + var7)) | var7
    var16 = var13 ^ var12
    var17 = var14 - var14
    var18 = arg2 | ((var7 ^ var13) | var3)
    var19 = var8 & (var18 - var17) | var8
    var20 = var16 ^ -1547903566 - var12 - var9
    var21 = var16 + var12 & var17 + var20
    result = (((var12 + (var14 | arg1 | var16)) & var18) | var20) - (var8 + (var20 & var17 ^ arg2 | var12 ^ var9))
    return result
def func5(arg4, arg5):
    var6 = arg4 & -878
    result = (((((arg5 ^ -861901618) & arg5 | 932) - arg4 - 1003569666) | (arg5 | arg5) ^ arg4) | 1354164723) + var6 ^ 762669180
    return result
def func4():
    func2()
    result = len([5 + -5 for i in [3 - (-5 + i) for i in [5 - (5 | 8) for i in range(15)]]])
    func3()
    return result
def func3():
    global len
    del len
def func2():
    global len
    len = lambda x : -10
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 6'
    print 'arg_number: 22'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var3 = func4()
    var7 = func5(arg1, arg2)
    var8 = 307 + (arg2 + (arg2 - 37))
    var9 = var8 | var8 | var7
    var10 = (var3 - -127 + -1445008688) ^ arg2
    if var10 < arg2:
        var11 = var10 ^ 962 & (-408 | var9)
    else:
        var11 = var8 ^ var3
    var12 = var10 + (var7 + var8) & var7
    var13 = (var8 | arg1 + var3) & var10
    var14 = var10 ^ var9 & var3
    var15 = (var12 ^ (var7 + var7)) | var7
    var16 = var13 ^ var12
    var17 = var14 - var14
    var18 = arg2 | ((var7 ^ var13) | var3)
    var19 = var8 & (var18 - var17) | var8
    var20 = var16 ^ -1547903566 - var12 - var9
    var21 = var16 + var12 & var17 + var20
    result = (((var12 + (var14 | arg1 | var16)) & var18) | var20) - (var8 + (var20 & var17 ^ arg2 | var12 ^ var9))
    return result
def func5(arg4, arg5):
    var6 = arg4 & -878
    result = (((((arg5 ^ -861901618) & arg5 | 932) - arg4 - 1003569666) | (arg5 | arg5) ^ arg4) | 1354164723) + var6 ^ 762669180
    return result
def func4():
    func2()
    result = len([5 + -5 for i in [3 - (-5 + i) for i in [5 - (5 | 8) for i in range(15)]]])
    func3()
    return result
def func3():
    global len
    del len
def func2():
    global len
    len = lambda x : -10
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 6'
    print 'arg_number: 22'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var3 = func4()
    var7 = func5(arg1, arg2)
    var8 = 307 + (arg2 + (arg2 - 37))
    var9 = var8 | var8 | var7
    var10 = (var3 - -127 + -1445008688) ^ arg2
    if var10 < arg2:
        var11 = var10 ^ 962 & (-408 | var9)
    else:
        var11 = var8 ^ var3
    var12 = var10 + (var7 + var8) & var7
    var13 = (var8 | arg1 + var3) & var10
    var14 = var10 ^ var9 & var3
    var15 = (var12 ^ (var7 + var7)) | var7
    var16 = var13 ^ var12
    var17 = var14 - var14
    var18 = arg2 | ((var7 ^ var13) | var3)
    var19 = var8 & (var18 - var17) | var8
    var20 = var16 ^ -1547903566 - var12 - var9
    var21 = var16 + var12 & var17 + var20
    result = (((var12 + (var14 | arg1 | var16)) & var18) | var20) - (var8 + (var20 & var17 ^ arg2 | var12 ^ var9))
    return result
def func5(arg4, arg5):
    var6 = arg4 & -878
    result = (((((arg5 ^ -861901618) & arg5 | 932) - arg4 - 1003569666) | (arg5 | arg5) ^ arg4) | 1354164723) + var6 ^ 762669180
    return result
def func4():
    func2()
    result = len([5 + -5 for i in [3 - (-5 + i) for i in [5 - (5 | 8) for i in range(15)]]])
    func3()
    return result
def func3():
    global len
    del len
def func2():
    global len
    len = lambda x : -10
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 6'
    print 'arg_number: 22'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var3 = func4()
    var7 = func5(arg1, arg2)
    var8 = 307 + (arg2 + (arg2 - 37))
    var9 = var8 | var8 | var7
    var10 = (var3 - -127 + -1445008688) ^ arg2
    if var10 < arg2:
        var11 = var10 ^ 962 & (-408 | var9)
    else:
        var11 = var8 ^ var3
    var12 = var10 + (var7 + var8) & var7
    var13 = (var8 | arg1 + var3) & var10
    var14 = var10 ^ var9 & var3
    var15 = (var12 ^ (var7 + var7)) | var7
    var16 = var13 ^ var12
    var17 = var14 - var14
    var18 = arg2 | ((var7 ^ var13) | var3)
    var19 = var8 & (var18 - var17) | var8
    var20 = var16 ^ -1547903566 - var12 - var9
    var21 = var16 + var12 & var17 + var20
    result = (((var12 + (var14 | arg1 | var16)) & var18) | var20) - (var8 + (var20 & var17 ^ arg2 | var12 ^ var9))
    return result
def func5(arg4, arg5):
    var6 = arg4 & -878
    result = (((((arg5 ^ -861901618) & arg5 | 932) - arg4 - 1003569666) | (arg5 | arg5) ^ arg4) | 1354164723) + var6 ^ 762669180
    return result
def func4():
    func2()
    result = len([5 + -5 for i in [3 - (-5 + i) for i in [5 - (5 | 8) for i in range(15)]]])
    func3()
    return result
def func3():
    global len
    del len
def func2():
    global len
    len = lambda x : -10
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 6'
    print 'arg_number: 22'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var3 = func4()
    var7 = func5(arg1, arg2)
    var8 = 307 + (arg2 + (arg2 - 37))
    var9 = var8 | var8 | var7
    var10 = (var3 - -127 + -1445008688) ^ arg2
    if var10 < arg2:
        var11 = var10 ^ 962 & (-408 | var9)
    else:
        var11 = var8 ^ var3
    var12 = var10 + (var7 + var8) & var7
    var13 = (var8 | arg1 + var3) & var10
    var14 = var10 ^ var9 & var3
    var15 = (var12 ^ (var7 + var7)) | var7
    var16 = var13 ^ var12
    var17 = var14 - var14
    var18 = arg2 | ((var7 ^ var13) | var3)
    var19 = var8 & (var18 - var17) | var8
    var20 = var16 ^ -1547903566 - var12 - var9
    var21 = var16 + var12 & var17 + var20
    result = (((var12 + (var14 | arg1 | var16)) & var18) | var20) - (var8 + (var20 & var17 ^ arg2 | var12 ^ var9))
    return result
def func5(arg4, arg5):
    var6 = arg4 & -878
    result = (((((arg5 ^ -861901618) & arg5 | 932) - arg4 - 1003569666) | (arg5 | arg5) ^ arg4) | 1354164723) + var6 ^ 762669180
    return result
def func4():
    func2()
    result = len([5 + -5 for i in [3 - (-5 + i) for i in [5 - (5 | 8) for i in range(15)]]])
    func3()
    return result
def func3():
    global len
    del len
def func2():
    global len
    len = lambda x : -10
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 6'
    print 'arg_number: 22'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var3 = func4()
    var7 = func5(arg1, arg2)
    var8 = 307 + (arg2 + (arg2 - 37))
    var9 = var8 | var8 | var7
    var10 = (var3 - -127 + -1445008688) ^ arg2
    if var10 < arg2:
        var11 = var10 ^ 962 & (-408 | var9)
    else:
        var11 = var8 ^ var3
    var12 = var10 + (var7 + var8) & var7
    var13 = (var8 | arg1 + var3) & var10
    var14 = var10 ^ var9 & var3
    var15 = (var12 ^ (var7 + var7)) | var7
    var16 = var13 ^ var12
    var17 = var14 - var14
    var18 = arg2 | ((var7 ^ var13) | var3)
    var19 = var8 & (var18 - var17) | var8
    var20 = var16 ^ -1547903566 - var12 - var9
    var21 = var16 + var12 & var17 + var20
    result = (((var12 + (var14 | arg1 | var16)) & var18) | var20) - (var8 + (var20 & var17 ^ arg2 | var12 ^ var9))
    return result
def func5(arg4, arg5):
    var6 = arg4 & -878
    result = (((((arg5 ^ -861901618) & arg5 | 932) - arg4 - 1003569666) | (arg5 | arg5) ^ arg4) | 1354164723) + var6 ^ 762669180
    return result
def func4():
    func2()
    result = len([5 + -5 for i in [3 - (-5 + i) for i in [5 - (5 | 8) for i in range(15)]]])
    func3()
    return result
def func3():
    global len
    del len
def func2():
    global len
    len = lambda x : -10
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 6'
    print 'arg_number: 22'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var3 = func4()
    var7 = func5(arg1, arg2)
    var8 = 307 + (arg2 + (arg2 - 37))
    var9 = var8 | var8 | var7
    var10 = (var3 - -127 + -1445008688) ^ arg2
    if var10 < arg2:
        var11 = var10 ^ 962 & (-408 | var9)
    else:
        var11 = var8 ^ var3
    var12 = var10 + (var7 + var8) & var7
    var13 = (var8 | arg1 + var3) & var10
    var14 = var10 ^ var9 & var3
    var15 = (var12 ^ (var7 + var7)) | var7
    var16 = var13 ^ var12
    var17 = var14 - var14
    var18 = arg2 | ((var7 ^ var13) | var3)
    var19 = var8 & (var18 - var17) | var8
    var20 = var16 ^ -1547903566 - var12 - var9
    var21 = var16 + var12 & var17 + var20
    result = (((var12 + (var14 | arg1 | var16)) & var18) | var20) - (var8 + (var20 & var17 ^ arg2 | var12 ^ var9))
    return result
def func5(arg4, arg5):
    var6 = arg4 & -878
    result = (((((arg5 ^ -861901618) & arg5 | 932) - arg4 - 1003569666) | (arg5 | arg5) ^ arg4) | 1354164723) + var6 ^ 762669180
    return result
def func4():
    func2()
    result = len([5 + -5 for i in [3 - (-5 + i) for i in [5 - (5 | 8) for i in range(15)]]])
    func3()
    return result
def func3():
    global len
    del len
def func2():
    global len
    len = lambda x : -10
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 6'
    print 'arg_number: 22'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var3 = func4()
    var7 = func5(arg1, arg2)
    var8 = 307 + (arg2 + (arg2 - 37))
    var9 = var8 | var8 | var7
    var10 = (var3 - -127 + -1445008688) ^ arg2
    if var10 < arg2:
        var11 = var10 ^ 962 & (-408 | var9)
    else:
        var11 = var8 ^ var3
    var12 = var10 + (var7 + var8) & var7
    var13 = (var8 | arg1 + var3) & var10
    var14 = var10 ^ var9 & var3
    var15 = (var12 ^ (var7 + var7)) | var7
    var16 = var13 ^ var12
    var17 = var14 - var14
    var18 = arg2 | ((var7 ^ var13) | var3)
    var19 = var8 & (var18 - var17) | var8
    var20 = var16 ^ -1547903566 - var12 - var9
    var21 = var16 + var12 & var17 + var20
    result = (((var12 + (var14 | arg1 | var16)) & var18) | var20) - (var8 + (var20 & var17 ^ arg2 | var12 ^ var9))
    return result
def func5(arg4, arg5):
    var6 = arg4 & -878
    result = (((((arg5 ^ -861901618) & arg5 | 932) - arg4 - 1003569666) | (arg5 | arg5) ^ arg4) | 1354164723) + var6 ^ 762669180
    return result
def func4():
    func2()
    result = len([5 + -5 for i in [3 - (-5 + i) for i in [5 - (5 | 8) for i in range(15)]]])
    func3()
    return result
def func3():
    global len
    del len
def func2():
    global len
    len = lambda x : -10
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 6'
    print 'arg_number: 22'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var3 = func4()
    var7 = func5(arg1, arg2)
    var8 = 307 + (arg2 + (arg2 - 37))
    var9 = var8 | var8 | var7
    var10 = (var3 - -127 + -1445008688) ^ arg2
    if var10 < arg2:
        var11 = var10 ^ 962 & (-408 | var9)
    else:
        var11 = var8 ^ var3
    var12 = var10 + (var7 + var8) & var7
    var13 = (var8 | arg1 + var3) & var10
    var14 = var10 ^ var9 & var3
    var15 = (var12 ^ (var7 + var7)) | var7
    var16 = var13 ^ var12
    var17 = var14 - var14
    var18 = arg2 | ((var7 ^ var13) | var3)
    var19 = var8 & (var18 - var17) | var8
    var20 = var16 ^ -1547903566 - var12 - var9
    var21 = var16 + var12 & var17 + var20
    result = (((var12 + (var14 | arg1 | var16)) & var18) | var20) - (var8 + (var20 & var17 ^ arg2 | var12 ^ var9))
    return result
def func5(arg4, arg5):
    var6 = arg4 & -878
    result = (((((arg5 ^ -861901618) & arg5 | 932) - arg4 - 1003569666) | (arg5 | arg5) ^ arg4) | 1354164723) + var6 ^ 762669180
    return result
def func4():
    func2()
    result = len([5 + -5 for i in [3 - (-5 + i) for i in [5 - (5 | 8) for i in range(15)]]])
    func3()
    return result
def func3():
    global len
    del len
def func2():
    global len
    len = lambda x : -10
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 6'
    print 'arg_number: 22'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var3 = func4()
    var7 = func5(arg1, arg2)
    var8 = 307 + (arg2 + (arg2 - 37))
    var9 = var8 | var8 | var7
    var10 = (var3 - -127 + -1445008688) ^ arg2
    if var10 < arg2:
        var11 = var10 ^ 962 & (-408 | var9)
    else:
        var11 = var8 ^ var3
    var12 = var10 + (var7 + var8) & var7
    var13 = (var8 | arg1 + var3) & var10
    var14 = var10 ^ var9 & var3
    var15 = (var12 ^ (var7 + var7)) | var7
    var16 = var13 ^ var12
    var17 = var14 - var14
    var18 = arg2 | ((var7 ^ var13) | var3)
    var19 = var8 & (var18 - var17) | var8
    var20 = var16 ^ -1547903566 - var12 - var9
    var21 = var16 + var12 & var17 + var20
    result = (((var12 + (var14 | arg1 | var16)) & var18) | var20) - (var8 + (var20 & var17 ^ arg2 | var12 ^ var9))
    return result
def func5(arg4, arg5):
    var6 = arg4 & -878
    result = (((((arg5 ^ -861901618) & arg5 | 932) - arg4 - 1003569666) | (arg5 | arg5) ^ arg4) | 1354164723) + var6 ^ 762669180
    return result
def func4():
    func2()
    result = len([5 + -5 for i in [3 - (-5 + i) for i in [5 - (5 | 8) for i in range(15)]]])
    func3()
    return result
def func3():
    global len
    del len
def func2():
    global len
    len = lambda x : -10
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 6'
    print 'arg_number: 22'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var3 = func4()
    var7 = func5(arg1, arg2)
    var8 = 307 + (arg2 + (arg2 - 37))
    var9 = var8 | var8 | var7
    var10 = (var3 - -127 + -1445008688) ^ arg2
    if var10 < arg2:
        var11 = var10 ^ 962 & (-408 | var9)
    else:
        var11 = var8 ^ var3
    var12 = var10 + (var7 + var8) & var7
    var13 = (var8 | arg1 + var3) & var10
    var14 = var10 ^ var9 & var3
    var15 = (var12 ^ (var7 + var7)) | var7
    var16 = var13 ^ var12
    var17 = var14 - var14
    var18 = arg2 | ((var7 ^ var13) | var3)
    var19 = var8 & (var18 - var17) | var8
    var20 = var16 ^ -1547903566 - var12 - var9
    var21 = var16 + var12 & var17 + var20
    result = (((var12 + (var14 | arg1 | var16)) & var18) | var20) - (var8 + (var20 & var17 ^ arg2 | var12 ^ var9))
    return result
def func5(arg4, arg5):
    var6 = arg4 & -878
    result = (((((arg5 ^ -861901618) & arg5 | 932) - arg4 - 1003569666) | (arg5 | arg5) ^ arg4) | 1354164723) + var6 ^ 762669180
    return result
def func4():
    func2()
    result = len([5 + -5 for i in [3 - (-5 + i) for i in [5 - (5 | 8) for i in range(15)]]])
    func3()
    return result
def func3():
    global len
    del len
def func2():
    global len
    len = lambda x : -10
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 6'
    print 'arg_number: 22'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var3 = func4()
    var7 = func5(arg1, arg2)
    var8 = 307 + (arg2 + (arg2 - 37))
    var9 = var8 | var8 | var7
    var10 = (var3 - -127 + -1445008688) ^ arg2
    if var10 < arg2:
        var11 = var10 ^ 962 & (-408 | var9)
    else:
        var11 = var8 ^ var3
    var12 = var10 + (var7 + var8) & var7
    var13 = (var8 | arg1 + var3) & var10
    var14 = var10 ^ var9 & var3
    var15 = (var12 ^ (var7 + var7)) | var7
    var16 = var13 ^ var12
    var17 = var14 - var14
    var18 = arg2 | ((var7 ^ var13) | var3)
    var19 = var8 & (var18 - var17) | var8
    var20 = var16 ^ -1547903566 - var12 - var9
    var21 = var16 + var12 & var17 + var20
    result = (((var12 + (var14 | arg1 | var16)) & var18) | var20) - (var8 + (var20 & var17 ^ arg2 | var12 ^ var9))
    return result
def func5(arg4, arg5):
    var6 = arg4 & -878
    result = (((((arg5 ^ -861901618) & arg5 | 932) - arg4 - 1003569666) | (arg5 | arg5) ^ arg4) | 1354164723) + var6 ^ 762669180
    return result
def func4():
    func2()
    result = len([5 + -5 for i in [3 - (-5 + i) for i in [5 - (5 | 8) for i in range(15)]]])
    func3()
    return result
def func3():
    global len
    del len
def func2():
    global len
    len = lambda x : -10
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 6'
    print 'arg_number: 22'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var3 = func4()
    var7 = func5(arg1, arg2)
    var8 = 307 + (arg2 + (arg2 - 37))
    var9 = var8 | var8 | var7
    var10 = (var3 - -127 + -1445008688) ^ arg2
    if var10 < arg2:
        var11 = var10 ^ 962 & (-408 | var9)
    else:
        var11 = var8 ^ var3
    var12 = var10 + (var7 + var8) & var7
    var13 = (var8 | arg1 + var3) & var10
    var14 = var10 ^ var9 & var3
    var15 = (var12 ^ (var7 + var7)) | var7
    var16 = var13 ^ var12
    var17 = var14 - var14
    var18 = arg2 | ((var7 ^ var13) | var3)
    var19 = var8 & (var18 - var17) | var8
    var20 = var16 ^ -1547903566 - var12 - var9
    var21 = var16 + var12 & var17 + var20
    result = (((var12 + (var14 | arg1 | var16)) & var18) | var20) - (var8 + (var20 & var17 ^ arg2 | var12 ^ var9))
    return result
def func5(arg4, arg5):
    var6 = arg4 & -878
    result = (((((arg5 ^ -861901618) & arg5 | 932) - arg4 - 1003569666) | (arg5 | arg5) ^ arg4) | 1354164723) + var6 ^ 762669180
    return result
def func4():
    func2()
    result = len([5 + -5 for i in [3 - (-5 + i) for i in [5 - (5 | 8) for i in range(15)]]])
    func3()
    return result
def func3():
    global len
    del len
def func2():
    global len
    len = lambda x : -10
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 6'
    print 'arg_number: 22'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var3 = func4()
    var7 = func5(arg1, arg2)
    var8 = 307 + (arg2 + (arg2 - 37))
    var9 = var8 | var8 | var7
    var10 = (var3 - -127 + -1445008688) ^ arg2
    if var10 < arg2:
        var11 = var10 ^ 962 & (-408 | var9)
    else:
        var11 = var8 ^ var3
    var12 = var10 + (var7 + var8) & var7
    var13 = (var8 | arg1 + var3) & var10
    var14 = var10 ^ var9 & var3
    var15 = (var12 ^ (var7 + var7)) | var7
    var16 = var13 ^ var12
    var17 = var14 - var14
    var18 = arg2 | ((var7 ^ var13) | var3)
    var19 = var8 & (var18 - var17) | var8
    var20 = var16 ^ -1547903566 - var12 - var9
    var21 = var16 + var12 & var17 + var20
    result = (((var12 + (var14 | arg1 | var16)) & var18) | var20) - (var8 + (var20 & var17 ^ arg2 | var12 ^ var9))
    return result
def func5(arg4, arg5):
    var6 = arg4 & -878
    result = (((((arg5 ^ -861901618) & arg5 | 932) - arg4 - 1003569666) | (arg5 | arg5) ^ arg4) | 1354164723) + var6 ^ 762669180
    return result
def func4():
    func2()
    result = len([5 + -5 for i in [3 - (-5 + i) for i in [5 - (5 | 8) for i in range(15)]]])
    func3()
    return result
def func3():
    global len
    del len
def func2():
    global len
    len = lambda x : -10
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 6'
    print 'arg_number: 22'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var3 = func4()
    var7 = func5(arg1, arg2)
    var8 = 307 + (arg2 + (arg2 - 37))
    var9 = var8 | var8 | var7
    var10 = (var3 - -127 + -1445008688) ^ arg2
    if var10 < arg2:
        var11 = var10 ^ 962 & (-408 | var9)
    else:
        var11 = var8 ^ var3
    var12 = var10 + (var7 + var8) & var7
    var13 = (var8 | arg1 + var3) & var10
    var14 = var10 ^ var9 & var3
    var15 = (var12 ^ (var7 + var7)) | var7
    var16 = var13 ^ var12
    var17 = var14 - var14
    var18 = arg2 | ((var7 ^ var13) | var3)
    var19 = var8 & (var18 - var17) | var8
    var20 = var16 ^ -1547903566 - var12 - var9
    var21 = var16 + var12 & var17 + var20
    result = (((var12 + (var14 | arg1 | var16)) & var18) | var20) - (var8 + (var20 & var17 ^ arg2 | var12 ^ var9))
    return result
def func5(arg4, arg5):
    var6 = arg4 & -878
    result = (((((arg5 ^ -861901618) & arg5 | 932) - arg4 - 1003569666) | (arg5 | arg5) ^ arg4) | 1354164723) + var6 ^ 762669180
    return result
def func4():
    func2()
    result = len([5 + -5 for i in [3 - (-5 + i) for i in [5 - (5 | 8) for i in range(15)]]])
    func3()
    return result
def func3():
    global len
    del len
def func2():
    global len
    len = lambda x : -10
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 6'
    print 'arg_number: 22'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var3 = func4()
    var7 = func5(arg1, arg2)
    var8 = 307 + (arg2 + (arg2 - 37))
    var9 = var8 | var8 | var7
    var10 = (var3 - -127 + -1445008688) ^ arg2
    if var10 < arg2:
        var11 = var10 ^ 962 & (-408 | var9)
    else:
        var11 = var8 ^ var3
    var12 = var10 + (var7 + var8) & var7
    var13 = (var8 | arg1 + var3) & var10
    var14 = var10 ^ var9 & var3
    var15 = (var12 ^ (var7 + var7)) | var7
    var16 = var13 ^ var12
    var17 = var14 - var14
    var18 = arg2 | ((var7 ^ var13) | var3)
    var19 = var8 & (var18 - var17) | var8
    var20 = var16 ^ -1547903566 - var12 - var9
    var21 = var16 + var12 & var17 + var20
    result = (((var12 + (var14 | arg1 | var16)) & var18) | var20) - (var8 + (var20 & var17 ^ arg2 | var12 ^ var9))
    return result
def func5(arg4, arg5):
    var6 = arg4 & -878
    result = (((((arg5 ^ -861901618) & arg5 | 932) - arg4 - 1003569666) | (arg5 | arg5) ^ arg4) | 1354164723) + var6 ^ 762669180
    return result
def func4():
    func2()
    result = len([5 + -5 for i in [3 - (-5 + i) for i in [5 - (5 | 8) for i in range(15)]]])
    func3()
    return result
def func3():
    global len
    del len
def func2():
    global len
    len = lambda x : -10
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 6'
    print 'arg_number: 22'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var3 = func4()
    var7 = func5(arg1, arg2)
    var8 = 307 + (arg2 + (arg2 - 37))
    var9 = var8 | var8 | var7
    var10 = (var3 - -127 + -1445008688) ^ arg2
    if var10 < arg2:
        var11 = var10 ^ 962 & (-408 | var9)
    else:
        var11 = var8 ^ var3
    var12 = var10 + (var7 + var8) & var7
    var13 = (var8 | arg1 + var3) & var10
    var14 = var10 ^ var9 & var3
    var15 = (var12 ^ (var7 + var7)) | var7
    var16 = var13 ^ var12
    var17 = var14 - var14
    var18 = arg2 | ((var7 ^ var13) | var3)
    var19 = var8 & (var18 - var17) | var8
    var20 = var16 ^ -1547903566 - var12 - var9
    var21 = var16 + var12 & var17 + var20
    result = (((var12 + (var14 | arg1 | var16)) & var18) | var20) - (var8 + (var20 & var17 ^ arg2 | var12 ^ var9))
    return result
def func5(arg4, arg5):
    var6 = arg4 & -878
    result = (((((arg5 ^ -861901618) & arg5 | 932) - arg4 - 1003569666) | (arg5 | arg5) ^ arg4) | 1354164723) + var6 ^ 762669180
    return result
def func4():
    func2()
    result = len([5 + -5 for i in [3 - (-5 + i) for i in [5 - (5 | 8) for i in range(15)]]])
    func3()
    return result
def func3():
    global len
    del len
def func2():
    global len
    len = lambda x : -10
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 6'
    print 'arg_number: 22'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var3 = func4()
    var7 = func5(arg1, arg2)
    var8 = 307 + (arg2 + (arg2 - 37))
    var9 = var8 | var8 | var7
    var10 = (var3 - -127 + -1445008688) ^ arg2
    if var10 < arg2:
        var11 = var10 ^ 962 & (-408 | var9)
    else:
        var11 = var8 ^ var3
    var12 = var10 + (var7 + var8) & var7
    var13 = (var8 | arg1 + var3) & var10
    var14 = var10 ^ var9 & var3
    var15 = (var12 ^ (var7 + var7)) | var7
    var16 = var13 ^ var12
    var17 = var14 - var14
    var18 = arg2 | ((var7 ^ var13) | var3)
    var19 = var8 & (var18 - var17) | var8
    var20 = var16 ^ -1547903566 - var12 - var9
    var21 = var16 + var12 & var17 + var20
    result = (((var12 + (var14 | arg1 | var16)) & var18) | var20) - (var8 + (var20 & var17 ^ arg2 | var12 ^ var9))
    return result
def func5(arg4, arg5):
    var6 = arg4 & -878
    result = (((((arg5 ^ -861901618) & arg5 | 932) - arg4 - 1003569666) | (arg5 | arg5) ^ arg4) | 1354164723) + var6 ^ 762669180
    return result
def func4():
    func2()
    result = len([5 + -5 for i in [3 - (-5 + i) for i in [5 - (5 | 8) for i in range(15)]]])
    func3()
    return result
def func3():
    global len
    del len
def func2():
    global len
    len = lambda x : -10
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 6'
    print 'arg_number: 22'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var3 = func4()
    var7 = func5(arg1, arg2)
    var8 = 307 + (arg2 + (arg2 - 37))
    var9 = var8 | var8 | var7
    var10 = (var3 - -127 + -1445008688) ^ arg2
    if var10 < arg2:
        var11 = var10 ^ 962 & (-408 | var9)
    else:
        var11 = var8 ^ var3
    var12 = var10 + (var7 + var8) & var7
    var13 = (var8 | arg1 + var3) & var10
    var14 = var10 ^ var9 & var3
    var15 = (var12 ^ (var7 + var7)) | var7
    var16 = var13 ^ var12
    var17 = var14 - var14
    var18 = arg2 | ((var7 ^ var13) | var3)
    var19 = var8 & (var18 - var17) | var8
    var20 = var16 ^ -1547903566 - var12 - var9
    var21 = var16 + var12 & var17 + var20
    result = (((var12 + (var14 | arg1 | var16)) & var18) | var20) - (var8 + (var20 & var17 ^ arg2 | var12 ^ var9))
    return result
def func5(arg4, arg5):
    var6 = arg4 & -878
    result = (((((arg5 ^ -861901618) & arg5 | 932) - arg4 - 1003569666) | (arg5 | arg5) ^ arg4) | 1354164723) + var6 ^ 762669180
    return result
def func4():
    func2()
    result = len([5 + -5 for i in [3 - (-5 + i) for i in [5 - (5 | 8) for i in range(15)]]])
    func3()
    return result
def func3():
    global len
    del len
def func2():
    global len
    len = lambda x : -10
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 6'
    print 'arg_number: 22'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var3 = func4()
    var7 = func5(arg1, arg2)
    var8 = 307 + (arg2 + (arg2 - 37))
    var9 = var8 | var8 | var7
    var10 = (var3 - -127 + -1445008688) ^ arg2
    if var10 < arg2:
        var11 = var10 ^ 962 & (-408 | var9)
    else:
        var11 = var8 ^ var3
    var12 = var10 + (var7 + var8) & var7
    var13 = (var8 | arg1 + var3) & var10
    var14 = var10 ^ var9 & var3
    var15 = (var12 ^ (var7 + var7)) | var7
    var16 = var13 ^ var12
    var17 = var14 - var14
    var18 = arg2 | ((var7 ^ var13) | var3)
    var19 = var8 & (var18 - var17) | var8
    var20 = var16 ^ -1547903566 - var12 - var9
    var21 = var16 + var12 & var17 + var20
    result = (((var12 + (var14 | arg1 | var16)) & var18) | var20) - (var8 + (var20 & var17 ^ arg2 | var12 ^ var9))
    return result
def func5(arg4, arg5):
    var6 = arg4 & -878
    result = (((((arg5 ^ -861901618) & arg5 | 932) - arg4 - 1003569666) | (arg5 | arg5) ^ arg4) | 1354164723) + var6 ^ 762669180
    return result
def func4():
    func2()
    result = len([5 + -5 for i in [3 - (-5 + i) for i in [5 - (5 | 8) for i in range(15)]]])
    func3()
    return result
def func3():
    global len
    del len
def func2():
    global len
    len = lambda x : -10
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 6'
    print 'arg_number: 22'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var3 = func4()
    var7 = func5(arg1, arg2)
    var8 = 307 + (arg2 + (arg2 - 37))
    var9 = var8 | var8 | var7
    var10 = (var3 - -127 + -1445008688) ^ arg2
    if var10 < arg2:
        var11 = var10 ^ 962 & (-408 | var9)
    else:
        var11 = var8 ^ var3
    var12 = var10 + (var7 + var8) & var7
    var13 = (var8 | arg1 + var3) & var10
    var14 = var10 ^ var9 & var3
    var15 = (var12 ^ (var7 + var7)) | var7
    var16 = var13 ^ var12
    var17 = var14 - var14
    var18 = arg2 | ((var7 ^ var13) | var3)
    var19 = var8 & (var18 - var17) | var8
    var20 = var16 ^ -1547903566 - var12 - var9
    var21 = var16 + var12 & var17 + var20
    result = (((var12 + (var14 | arg1 | var16)) & var18) | var20) - (var8 + (var20 & var17 ^ arg2 | var12 ^ var9))
    return result
def func5(arg4, arg5):
    var6 = arg4 & -878
    result = (((((arg5 ^ -861901618) & arg5 | 932) - arg4 - 1003569666) | (arg5 | arg5) ^ arg4) | 1354164723) + var6 ^ 762669180
    return result
def func4():
    func2()
    result = len([5 + -5 for i in [3 - (-5 + i) for i in [5 - (5 | 8) for i in range(15)]]])
    func3()
    return result
def func3():
    global len
    del len
def func2():
    global len
    len = lambda x : -10
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 6'
    print 'arg_number: 22'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var3 = func4()
    var7 = func5(arg1, arg2)
    var8 = 307 + (arg2 + (arg2 - 37))
    var9 = var8 | var8 | var7
    var10 = (var3 - -127 + -1445008688) ^ arg2
    if var10 < arg2:
        var11 = var10 ^ 962 & (-408 | var9)
    else:
        var11 = var8 ^ var3
    var12 = var10 + (var7 + var8) & var7
    var13 = (var8 | arg1 + var3) & var10
    var14 = var10 ^ var9 & var3
    var15 = (var12 ^ (var7 + var7)) | var7
    var16 = var13 ^ var12
    var17 = var14 - var14
    var18 = arg2 | ((var7 ^ var13) | var3)
    var19 = var8 & (var18 - var17) | var8
    var20 = var16 ^ -1547903566 - var12 - var9
    var21 = var16 + var12 & var17 + var20
    result = (((var12 + (var14 | arg1 | var16)) & var18) | var20) - (var8 + (var20 & var17 ^ arg2 | var12 ^ var9))
    return result
def func5(arg4, arg5):
    var6 = arg4 & -878
    result = (((((arg5 ^ -861901618) & arg5 | 932) - arg4 - 1003569666) | (arg5 | arg5) ^ arg4) | 1354164723) + var6 ^ 762669180
    return result
def func4():
    func2()
    result = len([5 + -5 for i in [3 - (-5 + i) for i in [5 - (5 | 8) for i in range(15)]]])
    func3()
    return result
def func3():
    global len
    del len
def func2():
    global len
    len = lambda x : -10
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 6'
    print 'arg_number: 22'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var3 = func4()
    var7 = func5(arg1, arg2)
    var8 = 307 + (arg2 + (arg2 - 37))
    var9 = var8 | var8 | var7
    var10 = (var3 - -127 + -1445008688) ^ arg2
    if var10 < arg2:
        var11 = var10 ^ 962 & (-408 | var9)
    else:
        var11 = var8 ^ var3
    var12 = var10 + (var7 + var8) & var7
    var13 = (var8 | arg1 + var3) & var10
    var14 = var10 ^ var9 & var3
    var15 = (var12 ^ (var7 + var7)) | var7
    var16 = var13 ^ var12
    var17 = var14 - var14
    var18 = arg2 | ((var7 ^ var13) | var3)
    var19 = var8 & (var18 - var17) | var8
    var20 = var16 ^ -1547903566 - var12 - var9
    var21 = var16 + var12 & var17 + var20
    result = (((var12 + (var14 | arg1 | var16)) & var18) | var20) - (var8 + (var20 & var17 ^ arg2 | var12 ^ var9))
    return result
def func5(arg4, arg5):
    var6 = arg4 & -878
    result = (((((arg5 ^ -861901618) & arg5 | 932) - arg4 - 1003569666) | (arg5 | arg5) ^ arg4) | 1354164723) + var6 ^ 762669180
    return result
def func4():
    func2()
    result = len([5 + -5 for i in [3 - (-5 + i) for i in [5 - (5 | 8) for i in range(15)]]])
    func3()
    return result
def func3():
    global len
    del len
def func2():
    global len
    len = lambda x : -10
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 6'
    print 'arg_number: 22'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var3 = func4()
    var7 = func5(arg1, arg2)
    var8 = 307 + (arg2 + (arg2 - 37))
    var9 = var8 | var8 | var7
    var10 = (var3 - -127 + -1445008688) ^ arg2
    if var10 < arg2:
        var11 = var10 ^ 962 & (-408 | var9)
    else:
        var11 = var8 ^ var3
    var12 = var10 + (var7 + var8) & var7
    var13 = (var8 | arg1 + var3) & var10
    var14 = var10 ^ var9 & var3
    var15 = (var12 ^ (var7 + var7)) | var7
    var16 = var13 ^ var12
    var17 = var14 - var14
    var18 = arg2 | ((var7 ^ var13) | var3)
    var19 = var8 & (var18 - var17) | var8
    var20 = var16 ^ -1547903566 - var12 - var9
    var21 = var16 + var12 & var17 + var20
    result = (((var12 + (var14 | arg1 | var16)) & var18) | var20) - (var8 + (var20 & var17 ^ arg2 | var12 ^ var9))
    return result
def func5(arg4, arg5):
    var6 = arg4 & -878
    result = (((((arg5 ^ -861901618) & arg5 | 932) - arg4 - 1003569666) | (arg5 | arg5) ^ arg4) | 1354164723) + var6 ^ 762669180
    return result
def func4():
    func2()
    result = len([5 + -5 for i in [3 - (-5 + i) for i in [5 - (5 | 8) for i in range(15)]]])
    func3()
    return result
def func3():
    global len
    del len
def func2():
    global len
    len = lambda x : -10
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 6'
    print 'arg_number: 22'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var3 = func4()
    var7 = func5(arg1, arg2)
    var8 = 307 + (arg2 + (arg2 - 37))
    var9 = var8 | var8 | var7
    var10 = (var3 - -127 + -1445008688) ^ arg2
    if var10 < arg2:
        var11 = var10 ^ 962 & (-408 | var9)
    else:
        var11 = var8 ^ var3
    var12 = var10 + (var7 + var8) & var7
    var13 = (var8 | arg1 + var3) & var10
    var14 = var10 ^ var9 & var3
    var15 = (var12 ^ (var7 + var7)) | var7
    var16 = var13 ^ var12
    var17 = var14 - var14
    var18 = arg2 | ((var7 ^ var13) | var3)
    var19 = var8 & (var18 - var17) | var8
    var20 = var16 ^ -1547903566 - var12 - var9
    var21 = var16 + var12 & var17 + var20
    result = (((var12 + (var14 | arg1 | var16)) & var18) | var20) - (var8 + (var20 & var17 ^ arg2 | var12 ^ var9))
    return result
def func5(arg4, arg5):
    var6 = arg4 & -878
    result = (((((arg5 ^ -861901618) & arg5 | 932) - arg4 - 1003569666) | (arg5 | arg5) ^ arg4) | 1354164723) + var6 ^ 762669180
    return result
def func4():
    func2()
    result = len([5 + -5 for i in [3 - (-5 + i) for i in [5 - (5 | 8) for i in range(15)]]])
    func3()
    return result
def func3():
    global len
    del len
def func2():
    global len
    len = lambda x : -10
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 6'
    print 'arg_number: 22'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var3 = func4()
    var7 = func5(arg1, arg2)
    var8 = 307 + (arg2 + (arg2 - 37))
    var9 = var8 | var8 | var7
    var10 = (var3 - -127 + -1445008688) ^ arg2
    if var10 < arg2:
        var11 = var10 ^ 962 & (-408 | var9)
    else:
        var11 = var8 ^ var3
    var12 = var10 + (var7 + var8) & var7
    var13 = (var8 | arg1 + var3) & var10
    var14 = var10 ^ var9 & var3
    var15 = (var12 ^ (var7 + var7)) | var7
    var16 = var13 ^ var12
    var17 = var14 - var14
    var18 = arg2 | ((var7 ^ var13) | var3)
    var19 = var8 & (var18 - var17) | var8
    var20 = var16 ^ -1547903566 - var12 - var9
    var21 = var16 + var12 & var17 + var20
    result = (((var12 + (var14 | arg1 | var16)) & var18) | var20) - (var8 + (var20 & var17 ^ arg2 | var12 ^ var9))
    return result
def func5(arg4, arg5):
    var6 = arg4 & -878
    result = (((((arg5 ^ -861901618) & arg5 | 932) - arg4 - 1003569666) | (arg5 | arg5) ^ arg4) | 1354164723) + var6 ^ 762669180
    return result
def func4():
    func2()
    result = len([5 + -5 for i in [3 - (-5 + i) for i in [5 - (5 | 8) for i in range(15)]]])
    func3()
    return result
def func3():
    global len
    del len
def func2():
    global len
    len = lambda x : -10
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 6'
    print 'arg_number: 22'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,def func1(arg1, arg2):
    var3 = func4()
    var7 = func5(arg1, arg2)
    var8 = 307 + (arg2 + (arg2 - 37))
    var9 = var8 | var8 | var7
    var10 = (var3 - -127 + -1445008688) ^ arg2
    if var10 < arg2:
        var11 = var10 ^ 962 & (-408 | var9)
    else:
        var11 = var8 ^ var3
    var12 = var10 + (var7 + var8) & var7
    var13 = (var8 | arg1 + var3) & var10
    var14 = var10 ^ var9 & var3
    var15 = (var12 ^ (var7 + var7)) | var7
    var16 = var13 ^ var12
    var17 = var14 - var14
    var18 = arg2 | ((var7 ^ var13) | var3)
    var19 = var8 & (var18 - var17) | var8
    var20 = var16 ^ -1547903566 - var12 - var9
    var21 = var16 + var12 & var17 + var20
    result = (((var12 + (var14 | arg1 | var16)) & var18) | var20) - (var8 + (var20 & var17 ^ arg2 | var12 ^ var9))
    return result
def func5(arg4, arg5):
    var6 = arg4 & -878
    result = (((((arg5 ^ -861901618) & arg5 | 932) - arg4 - 1003569666) | (arg5 | arg5) ^ arg4) | 1354164723) + var6 ^ 762669180
    return result
def func4():
    func2()
    result = len([5 + -5 for i in [3 - (-5 + i) for i in [5 - (5 | 8) for i in range(15)]]])
    func3()
    return result
def func3():
    global len
    del len
def func2():
    global len
    len = lambda x : -10
if __name__ == "__main__":
    print 'prog_size: 5'
    print 'func_number: 6'
    print 'arg_number: 22'
    for i in xrange(25000):
        x = 5
        x = func1(x, i)
        print x,
